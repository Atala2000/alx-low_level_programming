!<arch>
0-isupper.c/    0           0     0     644     190       `
#include "main.h"
/**
*_isupper -Checks number is uppercase
*@c: Value check
*Return: 1 if true 0 if not
*/
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	return (0);
}
0-memset.c/     0           0     0     644     253       `
#include "main.h"

/**
 * _memset - ironnou
 * @s: pointer to char params
 * @b: data to change
 * @n: index
 * Return: *s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
	{
		s[a] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     341       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings.
 * @src: copiar
 * @dest: destino
 * Return: dest.
 */

char *_strcat(char *dest, char *src)
{
	int k;
	int j;

	k = 0;
	while (dest[k] != '\0')
	{
		k++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[k] = src[j];
		k++;
		j++;
	}
	dest[k] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     310       `
/**
* _atoi - changes a string to an int
* @s: the string to be changed
*
* Return: the converted int
*/
int _atoi(char *s)
{
int i = 1;
unsigned int num = 0;
do {
if (*s == '-')
i *= -1;
else if (*s >= '0' && *s <= '9')
num = num * 10 + (*s - '0');
else if (num > 0)
break;
} while (*s++);
return (num *i);
}
1-isdigit.c/    0           0     0     644     218       `
#include "main.h"
/**
*_isdigit -Checks if number is digit
*@c: Character to check
*Return: 1 if character is lowercase and 0 if not
*/
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	return (0);
}
1-memcpy.c/     0           0     0     644     272       `
#include "main.h"

/**
 * _memcpy - memory area
 * @dest: pointer to char
 * @src: pointer to char
 * @n: size
 * Return: *0
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     370       `
#include "main.h"
#include <string.h>

/**
 * _strncat -  function that concatenates two strings.
 * @src: cadena
 * @dest: destino
 * @n: number.
 * Return: dest.
 */

char *_strncat(char *dest, char *src, int n)
{
	int index = strlen(dest);
	int i = 0;

	while (i < n && *src)
	{
		dest[index + i] = *src;
		src++;
		i++;
	}
	dest[index + i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     265       `
#include "main.h"

/**
 * _strchr - prints found c
 * @s: pointer to char
 * @c: char to found
 * Return: *0
*/

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (*s == c)
	{
		return (s);
	}
return (0);
}

2-strlen.c/     0           0     0     644     257       `
#include "main.h"

/**
 * _strlen - calculate the length of a string.
 *
 * @s: the string to calculate it's length.
 * Return: length of a string.
 */

int _strlen(char *s)
{
	int length = 0;

	for (; *s != '\0'; s++)
	{
		length++;
	}
	return (length);
}

2-strncpy.c/    0           0     0     644     360       `
#include "main.h"

/**
 * _strncpy -  function that copies a string..
 * @src: cadena a copiar
 * @dest: destino de la cadena.
 * @n: number.
 * Return: void
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     223       `
#include "main.h"
/**
*_islower -Checks if number is lowercase
*@c: Character to check
*Return: 1 if character is lowercase and 0 if not
*/
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}

3-puts.c/       0           0     0     644     177       `
#include "main.h"
/**
*_puts -finds string length
*@str: string
*Return: 0
*/
void _puts(char *str)
{
	for (; *str != '\0';)
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     301       `
#include "main.h"

/**
 * _strcmp -  function that compares two strings.
 * @s1: primera cadena.
 * @s2: segunda cadena.
 * Return: 0.
 */

int _strcmp(char *s1, char *s2)
{
	int comp = 0;

	while (*s1 == *s2 && *s1 != '\0')
	{
		s1++;
		s2++;
	}
	if (s1 != s2)
		comp = *s1 - *s2;

	return (comp);
}

3-strspn.c/     0           0     0     644     409       `
/**
* _strspn - Gets the length of prefix substring.
* @s: String where substring will look.
* @accept: Substring of chars.
* Return: Length of occurrence.
*/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int c = 0;
	char *t = accept;

	while (*s++)
	{
		while (*accept++)
			if (*(s - 1) == *(accept - 1))
			{
				c++;
				break;
			}
		if (!(*--accept))
			break;
		accept = t;
	}
	return (c);
}

4-isalpha.c/    0           0     0     644     185       `
#include "main.h"
/**
*_isalpha -Prints letters
*@c: Value check
*Return: 0 for false and 1 for true
*/
int _isalpha(int c)
{
	return ((c >= 65 && c <= 90) || (c >= 97 && c <= 122));
}

4-strpbrk.c/    0           0     0     644     312       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - bytes
 * @s: pointer to char
 * @accept: pointer
 * Return: Null value
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     432       `
#include "main.h"

/**
* _strstr - function locate
* @haystack: pointer to char
* @needle: pointer to char
* Return: 0
*/

char *_strstr(char *haystack, char *needle)
{
	char *result = haystack, *fneedle = needle;

	while (*haystack)
	{
		while (*needle)
		{
			if (*haystack++ != *needle++)
			{
				break;
			}
		}
		if (!*needle)
		{
			return (result);
		}
		needle = fneedle;
		result++;
		haystack = result;
	}
	return (0);
}
6-abs.c/        0           0     0     644     240       `
#include "main.h"
/**
 * _abs - function to print absolute numbers
 * @n: data type of the parameter of the function
 * Return: 0
 */
int _abs(int n)
{
	int abs_val;

	if (n < 0)
	{
		abs_val = n * -1;
		return (abs_val);
	}
	return (n);
}
9-strcpy.c/     0           0     0     644     347       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src, including \0.
 *@src: pointer.
 *@dest: pointer.
 *Return: the pointer to dest.
 */

char *_strcpy(char *dest, char *src)
{
	int i, length;

	for (length = 0; src[length] != '\0'; length++)
	{
	}

	for (i = 0; i <= length ; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

